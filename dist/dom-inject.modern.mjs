import e from"dompurify";function o(){return o=Object.assign?Object.assign.bind():function(e){for(var o=1;o<arguments.length;o++){var r=arguments[o];for(var t in r)({}).hasOwnProperty.call(r,t)&&(e[t]=r[t])}return e},o.apply(null,arguments)}class r{constructor(e={}){this.options=o({loadingClass:e.loadingClass||"is-loading",loadedClass:e.loadedClass||"has-loaded",errorClass:e.errorClass||"has-error",debugMode:e.debugMode||!1},e),this.cache=new Map,this.controller=new AbortController}log(e){this.options.debugMode&&console.log(e)}fetchContent(o,r=null,t=!1){return fetch(o,{signal:this.controller.signal}).then(e=>{if(!e.ok)throw new Error("Network response was not ok.");return this.log("Fetch response received"),e.text()}).then(o=>{const n=(new DOMParser).parseFromString(o,"text/html");let s=r?n.querySelector(r):n.body;if(!s)throw new Error(`Element not found for selector: ${r}`);return this.log("Parsed HTML and found element"),s=e.sanitize(t&&r?s.outerHTML:s.innerHTML),s})}from({selector:o,url:r=window.location.href,includeParent:t=!1,onStart:n,onEnd:s,onError:i}){if(!o){const e=new Error("Selector must be defined.");return i?i(e):console.error(e),Promise.reject(e)}n&&n();const c=`${r}-${o}-${t}`;return this.log(`Cache key is: ${c}`),new Promise((n,l)=>{if(this.cache.has(c)){const e=this.cache.get(c);return this.log("Serving from cache"),s&&s(e),void n(e)}if(this.log(`Fetching data from URL: ${r}`),r===window.location.href){const r=document.querySelector(o);if(!r){const e=new Error(`Element not found for selector: ${o}`);return i?i(e):console.error(e),l(e)}const a=e.sanitize(t?r.outerHTML:r.innerHTML);this.cache.set(c,a),s&&s(a),n(a)}else this.fetchContent(r,o,t).then(e=>{this.cache.set(c,e),s&&s(e),n(e)}).catch(e=>{i?i(e):console.error("Error fetching content:",e),l(e)})})}to({destination:e,data:o,mode:r="replace",delay:t=0,onStart:n,onEnd:s,onError:i}){if(!e||!o){const e=new Error("Destination and data must be defined.");return i?i(e):console.error(e),Promise.reject(e)}const c="string"==typeof e?document.querySelector(e):e;if(!c){const o=new Error(`Target element not found for selector: ${e}`);return i?i(o):console.error(o),Promise.reject(o)}n&&n(c),c.classList.add(this.options.loadingClass);const l=()=>{try{this.log(`Inserting content via '${r}' mode`),document.createDocumentFragment();const e=document.createElement("div");if(e.innerHTML=o,"prepend"===r)for(const o of[...e.childNodes].reverse())c.insertBefore(o,c.firstChild);else"append"===r||(c.innerHTML=""),c.appendChild(e);return c.classList.remove(this.options.loadingClass),c.classList.add(this.options.loadedClass),s&&s(c),Promise.resolve(c)}catch(e){return c.classList.remove(this.options.loadingClass),c.classList.add(this.options.errorClass),i?i(e):console.error("Error inserting content:",e),Promise.reject(e)}};if(!(t>0))return l();this.log(`Delaying insertion by ${t} seconds`),setTimeout(l,1e3*t)}fromTo(e,r){this.from(e).then(e=>this.to(o({},r,{data:e}))).catch(e=>{})}abortFetch(){this.controller.abort(),this.controller=new AbortController,this.cache.clear()}}window.ContentFetch=r;export{r as default};
//# sourceMappingURL=dom-inject.modern.mjs.map
